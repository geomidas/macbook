---

- name: debsecan | Update apt cache
  become: true
  apt:
    name: debsecan
    state: latest
    cache_valid_time: 36000
  ignore_errors: true

- name: debsecan | Remove cron 
  become: true
  file:
    path: /etc/cron.d/debsecan
    state: absent

- name: debsecan | Template config file
  become: true
  template:
    src: debsecan.j2
    dest: /etc/default/debsecan
    owner: root
    group: root
    mode: 0644

- name: Remove old files
  local_action:
    module: file
    path: "{{page_dir}}"
    state: absent
  run_once: true

- name: Create new dir for output files
  local_action:
    module: file
    path: "{{page_dir}}"
    state: directory
  run_once: true

- name: Set index file
  local_action: shell echo '' > {{page}} 
  run_once: true

- name: Sum patches
  become: true
  shell: >
    sum=$(apt list --upgradable 2>/dev/null | wc -l) && 
    ((sum--)) && 
    echo $sum
  register: patchsum_all
  changed_when: false
  failed_when: false

- name: Sum urgent patches
  shell: echo $(debsecan --only-fixed --suite $(lsb_release -cs) | grep 'remotely exploitable' | grep 'high urgency' | awk '{print $2}' | sort -u | wc -l)
  register: patchsum_urgent
  changed_when: false
  failed_when: false

- debug:
    msg: "{{ patchsum_urgent.stderr_lines }}"
  when: 
    - ( 'error' in patchsum_urgent.stderr_lines )

- name: Check if there's any risky package upgrades
  shell: |
    pkg=$( apt list --upgradable 2>/dev/null | grep 'nginx-common\|apache2/\|tomcat\|redis\|jdk/\|salt-common\|salt-master' )
    if [ -z "$pkg" ]
    then 
      echo "-"
    else 
      list=($(echo "${pkg}" | cut -d/ -f1))
      echo ${list[*]}
    fi
  register: riskyupg
  changed_when: false
  failed_when: false

- name: Check if there's a linux kernel upgrade
  shell: |
    pkg=( $( apt list --upgradable 2>/dev/null | grep linux-image ) )
    if [ -z "$pkg" ]
    then 
      echo "-" 
    else 
      echo "${pkg[1]}"
    fi
  register: kernelpatch
  changed_when: false
  failed_when: false

- debug:
    msg: "Server: {{ inventory_hostname }}, OS: {{ansible_distribution}} {{ansible_distribution_version}}, Patches: {{ patchsum_all.stdout }}, Urgent: {{patchsum_urgent.stdout}}, Risky: {{ riskyupg.stdout }}, Kernel patch: {{ kernelpatch.stdout }}"

- name: Create file
  local_action:
    module: file
    path: "{{page}}"
    state: touch
  run_once: true

- set_fact:
    table_content: |
      <!-- Table content -->
                <tr class="item">
                  <td> {{inventory_hostname}} </td>
                  <td> {{ansible_distribution}} {{ansible_distribution_version}} </td>
                  <td> {{patchsum_all.stdout}} </td>
                  <td> {{patchsum_urgent.stdout}} </td>
                  <td> {{riskyupg.stdout}} </td>
                  <td> {{kernelpatch.stdout}} </td>
                </tr>
  
- name: Create file for storing the final output
  local_action:
    module: file
    path: "{{page}}"
    state: touch
  run_once: true

- name: Add html header
  local_action: 
    module: lineinfile 
    line: "{{ html_header }}" 
    dest: "{{ page }}"
  run_once: true

- name: Add table title
  local_action: 
    module: lineinfile 
    line: "{{ html_table_title }}" 
    dest: "{{ page }}"
  run_once: true

- name: Add table content
  local_action: 
    module: lineinfile
    line: "{{ table_content }}"
    dest: "{{ page }}"

- name: Add html footer
  local_action: 
    module: lineinfile 
    line: "{{ html_footer }}" 
    dest: "{{page}}"
  run_once: true
