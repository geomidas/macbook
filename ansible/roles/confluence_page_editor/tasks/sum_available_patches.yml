---

- name: debsecan | Update apt cache
  become: true
  apt:
    name: debsecan
    state: latest
    cache_valid_time: 36000
  ignore_errors: true

- name: debsecan | Remove cron 
  become: true
  file:
    path: /etc/cron.d/debsecan
    state: absent

- name: debsecan | Template config file
  become: true
  template:
    src: debsecan.j2
    dest: /etc/default/debsecan
    owner: root
    group: root
    mode: 0644
  
- name: Create log dir
  local_action:
    module: file
    path: "{{page_dir}}"
    state: directory
  run_once: true

- name: Remove old logs, except from the old page, for diff
  local_action: >
    shell bash -c 'mv -f {{page}} {{page_old}} ; rm -f {{page_sorted}} {{page_unsorted}}' 
    failed_when=false
  run_once: true

- name: Sum patches
  become: true
  shell: >
    sum=$(apt list --upgradable 2>/dev/null | wc -l) && 
    ((sum--)) && 
    echo $sum
  register: patchsum_all
  changed_when: false
  failed_when: false

- name: Sum urgent patches
  shell: echo $(debsecan --only-fixed --suite $(lsb_release -cs) | grep 'remotely exploitable' | grep 'high urgency' | awk '{print $2}' | sort -u | wc -l)
  register: patchsum_urgent
  changed_when: false
  failed_when: false

- debug:
    msg: "{{ patchsum_urgent.stderr_lines }}"
  when: 
    - ( 'error' in patchsum_urgent.stderr_lines )

- name: Check if there's any risky package upgrades
  shell: |
    pkg=$( apt list --upgradable 2>/dev/null | grep 'nginx-common\|apache2/\|tomcat\|redis\|jdk/\|salt-common\|salt-master' )
    if [ -z "$pkg" ]
    then 
      echo "-"
    else 
      list=($(echo "${pkg}" | cut -d/ -f1))
      echo ${list[*]}
    fi
  register: riskyupg
  changed_when: false
  failed_when: false

- name: Check if there's a linux kernel upgrade
  shell: |
    pkg=( $( apt list --upgradable 2>/dev/null | grep linux-image ) )
    if [ -z "$pkg" ]
    then 
      echo "-" 
    else 
      echo "${pkg[1]}"
    fi
  register: kernelpatch
  changed_when: false
  failed_when: false

- debug:
    msg: "Server: {{ inventory_hostname }}, OS: {{ansible_distribution}} {{ansible_distribution_version}}, Patches: {{ patchsum_all.stdout }}, Urgent: {{patchsum_urgent.stdout}}, Risky: {{ riskyupg.stdout }}, Kernel patch: {{ kernelpatch.stdout }}"

- name: Create file for sorting the page content
  local_action:
    module: file
    path: "{{page_unsorted}}"
    state: touch
  run_once: true

- name: Create unsorted table content
  local_action: shell bash -c "echo '<tr> <td> {{inventory_hostname}} </td> <td> <center> {{ansible_distribution}} {{ansible_distribution_version}} </center> </td> <td> <center> {{patchsum_all.stdout}} </center> </td> <td> <center> {{patchsum_urgent.stdout}} </center> </td> <td> <center> {{riskyupg.stdout}} </center> </td> <td> <center> {{kernelpatch.stdout}} </center> </td> </tr>' >> {{page_unsorted}}"

- name: Sort file
  local_action: shell bash -c 'sort {{page_unsorted}} > {{page_sorted}}'
  run_once: true

- name: Add table tags
  local_action: shell bash -c "echo '<table><tbody>' > {{page}}"
  run_once: true

- name: Add table header
  local_action: shell bash -c "echo '<tr> <th> <center> Server </center> </th> <th> <center> OS </center> </th> <th> <center> Patches </center> </th> <th> <center> Urgent </center> </th> <th> <center> Risky </center> </th> <th> <center> Kernel patch </center> </th> </tr>' >> {{page}}"
  run_once: true

- name: Add sorted content
  local_action: shell bash -c 'cat {{page_sorted}} >> {{page}}'
  run_once: true

- name: Add table end tags
  local_action: shell bash -c "echo '</tbody></table>' >> {{page}}"
  run_once: true

- name: Check for changes in the content of the confluence page
  local_action: shell diff <(sort {{page}}) <(sort {{page_old}})
  changed_when: false
  failed_when: false
  register: filediff
  run_once: true

- name: Show changes. Exit if there are none
  debug:
    msg: "Confluence page changes {{filediff.stdout}}"
  run_once: true
  
- meta: end_play
  when: filediff.stdout == ""

- name: Load file
  local_action: command cat {{page}}
  register: xhtml_file
  changed_when: false
  run_once: true

- name: Remove new lines from xhtml 
  set_fact:
    xhtml_file: "{{ xhtml_file.stdout | replace('\n', '') }}"
  run_once: true

#- name: Debug | xhtml file
#  debug:
#    var: xhtml_file
#  run_once: true

- name: Get the confluence page version number
  local_action: >
    shell curl -s -u {{confluence_credentials}} -X GET http://confluence.mycompany.com/pages/viewpreviousversions.action?pageId={{page_id}} | grep '(v. ' | sed 's/[^0-9]*//g' 
    warn=false
  register: page_version
  changed_when: false
  run_once: true

- name: Debug | Page version number
  debug:
    msg: "The confluence page version for {{page_name}} is {{page_version.stdout}}. The new page version will be {{page_version.stdout | int + 1}}."
  run_once: true

- set_fact:
    jsonfile: '{"id": "{{page_id}}", "title": "{{page_name}}", "type": "page", "version": { "number": "{{page_version.stdout | int + 1}}" }, "body": { "storage": { "value": "{{xhtml_file}}", "representation": "storage" } } } }'
  run_once: true

#- name: Debug | jsonfile
#  debug:
#    var: jsonfile
#  run_once: true

- set_fact:
    content_type: 'Content-Type: application/json'
  run_once: true

- name: Update confluence page
  local_action: >
    shell curl -s -u "{{confluence_credentials}}" -X PUT -H "{{content_type}}" -d '{{jsonfile}}' http://confluence.mycompany.com/rest/api/content/{{page_id}}
    warn=false
  register: update_confluence
  run_once: true
#  failed_when: false

#- name: Debug | confluence api call output
#  debug:
#    var: update_confluence
#  run_once: true
#  when: update_confluence.changed
