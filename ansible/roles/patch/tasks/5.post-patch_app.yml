---

- name: app | Make sure the redis pid file is absent
  become: true
  file:
    path: /var/run/redis_9849.pid
    state: absent
  when: 
    - packages.changed
    - ( 'linux-image' in kernelup.stdout )
    
- name: app | Make sure redis is not running
  become: true
  shell: /etc/init.d/redis_9849 stop
  register: redis_stop
  when: 
    - packages.changed
    - ( 'linux-image' in kernelup.stdout )

- debug:
    msg: "{{redis_stop.stdout_lines}}"
  when: 
    - packages.changed
    - ( 'linux-image' in kernelup.stdout )

- name: app | Start redis
  become: true
  shell: /etc/init.d/redis_9849 start
  register: redis_start
  when: 
    - packages.changed
    - ( 'linux-image' in kernelup.stdout )

- debug:
    msg: "{{redis_start.stdout_lines}}"
  when: 
    - packages.changed
    - ( 'linux-image' in kernelup.stdout )
    
# Choose one node in each datacenter, to test redis from.
# The reson for this, is the way networking is setup. The redis port is not accessible outside the local app subnets.
- name: app_prod_ie1 | Choose another node in the DC, that will test redis on the target
  set_fact:
    tester: "{{ groups.app_prod_ie1 | random }}"
  when:
    - ( 'app_prod_ie1' in group_names )

- name: app_prod_ie2 | Choose another node in the DC, that will test redis on the target
  set_fact:
    tester: "{{ groups.app_prod_ie2 | random }}"    
  when:
    - ( 'app_prod_ie2' in group_names )

- name: app_prod_au | Choose another node in the DC, that will test redis on the target
  set_fact:
    tester: "{{ groups.app_prod_au | random }}"
  when: 
    - ( 'app_prod_au' in group_names )
  
- name: app_prod_us | Choose another node in the DC, that will test redis on the target
  set_fact:
    tester: "{{ groups.app_prod_us | random }}"
  when: 
    - ( 'app_prod_us' in group_names )
  
- name: app_dev, app_stag | Choose another node in the DC, that will test redis on the target
  set_fact:
    tester: "{{ groups.app_dev | random }}"
  when: 
    - ( 'app_dev' in group_names ) or 
      ( 'app_stag' in group_names )

- name: Print out the node that will test redis
  debug: 
    var: tester

- name: Checking if redis is accessible externally
  wait_for:
    port: 9849
    host: '{{ ansible_default_ipv4.address }}'
    delay: 4
    timeout: 600
  connection: local
  delegate_to: '{{ tester }}'
  when: 
    - ( 'app_prod' in group_names )  # Redis is not properly setup on dev servers so tests might fail

- name: app | Make sure there is at least one redis client connected
  shell: redis-cli -h '{{ ansible_hostname }}' -p 9849 info | grep -i connected_clients
  register: clients
  until: clients.stdout.find('0') == -1
  delay: 4
  retries: 30
  when: 
    - ( 'app_prod' in group_names )  # Redis is not properly setup on dev servers so tests might fail

- name: app | slack | Notify sysadmins
  slack:
    msg: "_Redis test passed. Starting tomcat..._"
    token: "{{ slack_token }}"
    channel: "{{ slack_channel }}"
    username: "{{ slack_user }}"
    icon_emoji: "{{ slack_emoji }}"
  delegate_to: localhost

- name: app | Start app service
  become: true
  shell: /etc/init.d/app.sh tomcatrestart
  register: appstart
  failed_when: false
  when:
    - packages.changed

- name: app | Print app startup script output
  debug:
    msg: "{{ appstart.stdout_lines }}"
  when: 
    - packages.changed

- name: app | Get the status of the app app
  uri:
    url: http://localhost:8180/app/status.txt
    method: POST
  register: status

- name: app | Print probe status
  debug:
    msg: "{{ status.msg }}"

- name: app | slack | Notify sysadmins
  slack:
    msg: "_{{ status.msg }}_"
    token: "{{ slack_token }}"
    channel: "{{ slack_channel }}"
    username: "{{ slack_user }}"
    icon_emoji: "{{ slack_emoji }}"
  delegate_to: localhost

- name: app | slack | Notify sysadmins on issue
  slack:
    msg: "_Probe status not ok. Stopping to prevent issue from spreading_"
    token: "{{ slack_token }}"
    channel: "{{ slack_channel }}"
    username: "{{ slack_user }}"
    icon_emoji: "{{ slack_emoji }}"
  delegate_to: localhost
  when: 
    - ( 'OK' not in status.msg )

- name: app | Fail if PROBE is not OK, to prevent an issue from spreading
  debug:
    msg: status.stdout
  failed_when: 
    - ( 'OK' not in status.msg )